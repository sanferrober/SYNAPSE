#!/usr/bin/env python3
"""
Demostraci√≥n del sistema refactorizado de herramientas MCP
"""

import json
import os
import time
from datetime import datetime

def demo_mcp_config():
    """Demuestra la configuraci√≥n de API Keys MCP"""
    print("üîß Demostraci√≥n del Sistema de Configuraci√≥n MCP")
    print("=" * 60)
    
    # Verificar si existe el archivo de configuraci√≥n
    config_file = "mcp_api_config.json"
    
    if os.path.exists(config_file):
        print(f"‚úÖ Archivo de configuraci√≥n encontrado: {config_file}")
        
        # Leer y mostrar configuraci√≥n
        with open(config_file, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        print("\nüìã Contenido de la configuraci√≥n:")
        print(f"   - API Keys definidas: {len(config.get('api_keys', {}))}")
        print(f"   - Herramientas gratuitas: {len(config.get('free_tools', []))}")
        print(f"   - Herramientas con fallback: {len(config.get('fallback_tools', {}))}")
        
        print("\nüîë Estado de API Keys:")
        for service, info in config.get('api_keys', {}).items():
            has_key = bool(info.get('key'))
            status = "‚úÖ Configurada" if has_key else "‚ùå No configurada"
            print(f"   {service}: {status}")
            if not has_key:
                print(f"      Descripci√≥n: {info.get('description', 'N/A')}")
        
        print("\nüÜì Herramientas Gratuitas (primeras 5):")
        for tool in config.get('free_tools', [])[:5]:
            print(f"   - {tool}")
    else:
        print(f"‚ùå Archivo de configuraci√≥n no encontrado: {config_file}")
        print("   Creando archivo de configuraci√≥n de ejemplo...")
        
        # Crear configuraci√≥n de ejemplo
        example_config = {
            "api_keys": {
                "brave_search": {
                    "key": "",
                    "description": "API Key para Brave Search",
                    "required": False
                },
                "tavily_search": {
                    "key": "",
                    "description": "API Key para Tavily Search",
                    "required": False
                }
            },
            "free_tools": [
                "web_search_mcp",
                "github_mcp",
                "wikipedia_mcp"
            ],
            "fallback_tools": {
                "brave_search_mcp": "web_search_mcp",
                "tavily_search": "web_search_mcp"
            }
        }
        
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(example_config, f, indent=2, ensure_ascii=False)
        
        print(f"   ‚úÖ Archivo creado: {config_file}")

def demo_tool_execution():
    """Demuestra la ejecuci√≥n de herramientas MCP"""
    print("\n\nüöÄ Demostraci√≥n de Ejecuci√≥n de Herramientas MCP")
    print("=" * 60)
    
    # Simular ejecuci√≥n de herramientas
    tools_demo = [
        {
            'tool_id': 'web_search_mcp',
            'name': 'B√∫squeda Web (DuckDuckGo)',
            'type': 'Gratuita',
            'parameters': {'query': 'artificial intelligence 2024'},
            'result': 'Resultados de b√∫squeda sobre IA en 2024...'
        },
        {
            'tool_id': 'github_mcp',
            'name': 'B√∫squeda en GitHub',
            'type': 'Gratuita',
            'parameters': {'query': 'machine learning', 'language': 'python'},
            'result': 'Repositorios de ML en Python encontrados...'
        },
        {
            'tool_id': 'brave_search_mcp',
            'name': 'B√∫squeda con Brave',
            'type': 'Requiere API Key',
            'parameters': {'query': 'latest tech news'},
            'result': 'Error: API Key no configurada. Usando fallback a DuckDuckGo...'
        }
    ]
    
    for tool in tools_demo:
        print(f"\nüìå {tool['name']} ({tool['type']})")
        print(f"   Tool ID: {tool['tool_id']}")
        print(f"   Par√°metros: {tool['parameters']}")
        print(f"   Ejecutando...")
        time.sleep(0.5)  # Simular tiempo de ejecuci√≥n
        print(f"   Resultado: {tool['result']}")

def show_integration_flow():
    """Muestra el flujo de integraci√≥n"""
    print("\n\nüìä Flujo de Integraci√≥n del Sistema Refactorizado")
    print("=" * 60)
    
    flow = """
    1. Usuario solicita ejecutar herramienta MCP
       ‚Üì
    2. Sistema verifica en MCPConfigManager:
       - ¬øLa herramienta es gratuita?
       - ¬øTiene API Key configurada?
       - ¬øExiste herramienta de fallback?
       ‚Üì
    3. Decisi√≥n de ejecuci√≥n:
       a) Herramienta gratuita ‚Üí Ejecutar directamente
       b) API Key configurada ‚Üí Ejecutar con API Key
       c) Sin API Key pero con fallback ‚Üí Usar fallback
       d) Sin API Key y sin fallback ‚Üí Retornar error informativo
       ‚Üì
    4. Ejecutar herramienta y retornar resultado
    """
    
    print(flow)
    
    print("\nüéØ Beneficios del Sistema Refactorizado:")
    print("   ‚úÖ No m√°s simulaciones cuando faltan API Keys")
    print("   ‚úÖ Mensajes de error claros e informativos")
    print("   ‚úÖ Gesti√≥n centralizada de configuraci√≥n")
    print("   ‚úÖ Interfaz web para configurar API Keys")
    print("   ‚úÖ Fallback autom√°tico a herramientas gratuitas")

def main():
    """Funci√≥n principal"""
    print("üåü SISTEMA REFACTORIZADO DE HERRAMIENTAS MCP")
    print("=" * 70)
    print(f"Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 70)
    
    # Ejecutar demostraciones
    demo_mcp_config()
    demo_tool_execution()
    show_integration_flow()
    
    # Resumen final
    print("\n\n" + "=" * 70)
    print("‚úÖ RESUMEN DEL SISTEMA REFACTORIZADO")
    print("=" * 70)
    
    print("\nüìÅ Archivos Creados/Modificados:")
    files = [
        ("mcp_api_config.json", "Configuraci√≥n de API Keys"),
        ("mcp_integration/mcp_config_manager.py", "Gestor de configuraci√≥n"),
        ("mcp_integration/real_mcp_tools.py", "Herramientas MCP refactorizadas"),
        ("synapse-ui-new/src/components/MCPConfigPanel.js", "Panel de configuraci√≥n UI"),
        ("synapse_server_final.py", "Endpoints de configuraci√≥n agregados")
    ]
    
    for file, desc in files:
        exists = "‚úÖ" if os.path.exists(file) else "‚ùì"
        print(f"   {exists} {file}")
        print(f"      ‚Üí {desc}")
    
    print("\nüí° Pr√≥ximos Pasos:")
    print("   1. Instalar dependencias: pip install -r requirements.txt")
    print("   2. Configurar API Keys en mcp_api_config.json")
    print("   3. Reiniciar el servidor Synapse")
    print("   4. Acceder al panel 'MCP Config' en el frontend")
    print("   5. Probar las herramientas MCP")
    
    print("\nüéâ ¬°Sistema refactorizado listo para usar!")

if __name__ == "__main__":
    main()